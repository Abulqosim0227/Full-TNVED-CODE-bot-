import logging
from aiogram import Router, types, F, Bot
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove, FSInputFile
from aiogram.filters import CommandStart, Command, or_f
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.exceptions import TelegramForbiddenError
from utils.predictor import search_product, smart_search, EnhancedProductSearchSystem
from utils.db import get_connection, log_not_found_query, save_search_result
from utils.db_search import search_classifier_db

async def handle_blocked_user(user_id: int, action: str = "send_message"):
    """Handle when a user blocks the bot"""
    try:
        conn = await get_connection()
        # Mark user as blocked in database
        await conn.execute("""
            UPDATE users SET blocked = TRUE, blocked_at = CURRENT_TIMESTAMP 
            WHERE telegram_id = $1
        """, user_id)
        await conn.close()
        logging.info(f"User {user_id} blocked the bot during {action}")
    except Exception as e:
        logging.error(f"Error handling blocked user {user_id}: {e}")

async def safe_send_message(message: Message, text: str, **kwargs):
    """Send message with error handling for blocked users"""
    try:
        return await message.answer(text, **kwargs)
    except TelegramForbiddenError:
        await handle_blocked_user(message.from_user.id, "send_message")
        return None
    except Exception as e:
        logging.error(f"Error sending message to user {message.from_user.id}: {e}")
        return None
from pathlib import Path

# Database-only architecture - no CSV file dependency

# Initialize the enhanced prediction system (database-only)
predictor = EnhancedProductSearchSystem()
# Localization dictionary
MESSAGES = {
    "choose_language": {
        "ru": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:\nIltimos, tilni tanlang:\nPlease choose a language:",
        "uz": "Iltimos, tilni tanlang:\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:\nPlease choose a language:",
        "en": "Please choose a language:\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:\nIltimos, tilni tanlang:"
    },
    "welcome": {
        "ru": "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç Nihol! –Ø –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏ –∫–æ–¥—ã –¢–ù –í–≠–î –¥–ª—è –≤–∞—à–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤.",
        "uz": "üëã Nihol botiga xush kelibsiz! Men sizga mahsulotlaringiz uchun TN VED kodlarini topishda yordam beraman.",
        "en": "üëã Welcome to the Nihol bot! I will help you find HS/TN VED codes for your products."
    },
    "register_prompt": {
        "ru": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, –µ—Å–ª–∏ –≤—ã –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.",
        "uz": "Agar siz yangi foydalanuvchi bo'lsangiz, iltimos, ro'yxatdan o'ting.",
        "en": "Please register if you are a new user."
    },
    "send_name": {
        "ru": "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:",
        "uz": "Boshlash uchun ismingiz va familiyangizni yuboring:",
        "en": "To get started, please send your first name and last name:"
    },
    "send_contact": {
        "ru": "üì≤ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç:",
        "uz": "üì≤ Endi kontakt raqamingizni yuboring:",
        "en": "üì≤ Now please share your contact:"
    },
    "registration_done": {
        "ru": "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
        "uz": "‚úÖ Ro'yxatdan o'tish yakunlandi. Xush kelibsiz!",
        "en": "‚úÖ Registration complete. Welcome!"
    },
    "not_registered": {
        "ru": "‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start –∏ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.",
        "uz": "‚ö†Ô∏è Siz ro'yxatdan o'tmagansiz. Iltimos, /start ni yuboring va ro'yxatdan o'ting.",
        "en": "‚ö†Ô∏è You are not registered. Please send /start and complete the registration."
    },
    "search_prompt": {
        "ru": "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–¥–∞ –¢–ù –í–≠–î:",
        "uz": "‚úèÔ∏è TN VED kodini topish uchun mahsulot tavsifini kiriting:",
        "en": "‚úèÔ∏è Enter the description of the product to search for HS/TN VED codes:"
    },
    "search_prompt_continue": {
        "ru": "üîÑ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –û—Ç–º–µ–Ω–∞:",
        "uz": "üîÑ Keyingi mahsulot tavsifini kiriting yoki Bekor qilish tugmasini bosing:",
        "en": "üîÑ Enter the description of the next product or click Cancel:"
    },
    "search_cancelled": {
        "ru": "‚ùå –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω—ë–Ω.",
        "uz": "‚ùå Qidiruv bekor qilindi.",
        "en": "‚ùå Search cancelled."
    },
    "wait_message": {
        "ru": "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...",
        "uz": "‚è≥ Iltimos, kuting, bu biroz vaqt olishi mumkin...",
        "en": "‚è≥ Please wait, this may take some time..."
    },
    "search_error": {
        "ru": "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
        "uz": "‚ùå Qidiruvda xatolik yuz berdi. Iltimos, qayta urinib ko'ring.",
        "en": "‚ùå An error occurred while searching. Please try again later."
    },
    "contacts": {
        "ru": "üìû –°–≤—è–∑—å —Å –Ω–∞–º–∏:\n‚Ä¢ üåê https://nihol.uz\n‚Ä¢ üìß info@nihol.uz\n‚Ä¢ üì± +998 71 208 58 44",
        "uz": "üìû Biz bilan bog'lanish:\n‚Ä¢ üåê https://nihol.uz\n‚Ä¢ üìß info@nihol.uz\n‚Ä¢ üì± +998 71 208 58 44",
        "en": "üìû Contact us:\n‚Ä¢ üåê https://nihol.uz\n‚Ä¢ üìß info@nihol.uz\n‚Ä¢ üì± +998 71 208 58 44"
    },
    "myinfo_not_found": {
        "ru": "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å–Ω–æ–≤–∞.",
        "uz": "‚ùå Foydalanuvchi topilmadi. Iltimos, qayta ro'yxatdan o'ting.",
        "en": "‚ùå User not found. Please register again."
    },
    "help": {
        "ru": "üí° –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/search ‚Äî –ü–æ–∏—Å–∫ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é —Ç–æ–≤–∞—Ä–∞\n/contacts ‚Äî –ö–æ–Ω—Ç–∞–∫—Ç—ã —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏\n/myinfo ‚Äî –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Å\n/help ‚Äî –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É\n/language ‚Äî –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫",
        "uz": "üí° Mavjud buyruqlar:\n/search ‚Äî Mahsulot tavsifi bo'yicha qidiruv\n/contacts ‚Äî Texnik yordam kontaktlari\n/myinfo ‚Äî Siz haqingizdagi ma'lumot\n/help ‚Äî Bot bo'yicha yordam\n/language ‚Äî Tilni o'zgartirish",
        "en": "üí° Available commands:\n/search ‚Äî Search by product description\n/contacts ‚Äî Technical support contacts\n/myinfo ‚Äî Your information\n/help ‚Äî Bot help\n/language ‚Äî Change language"
    },
    "fallback": {
        "ru": "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã /start –∏–ª–∏ /search.",
        "uz": "‚ùó Iltimos, menyudan yoki /start yoki /search buyruqlaridan foydalaning.",
        "en": "‚ùó Please use the menu or commands /start or /search."
    },
    "language_changed": {
        "ru": "‚úÖ –Ø–∑—ã–∫ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π.",
        "uz": "‚úÖ Til muvaffaqiyatli o'zbekchaga o'zgartirildi.",
        "en": "‚úÖ Language successfully changed to English."
    },
    "not_found": {
        "ru": "‚ùå –¢–æ–≤–∞—Ä '{query}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏–ª–∏ –±–æ–ª–µ–µ –æ–±—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ.",
        "uz": "‚ùå '{query}' mahsuloti topilmadi. Boshqa yozuv variantlaridan foydalaning yoki tavsifni umumiyroq qiling.",
        "en": "‚ùå Product '{query}' not found. Try using different spelling variations or a more general description."
    },
    "not_found_with_suggestions": {
        "ru": "‚ùå –¢–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è '{query}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Ö–æ–∂–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
        "uz": "‚ùå '{query}' uchun aniq moslik topilmadi. Mana bir nechta o'xshash variantlar:",
        "en": "‚ùå No exact match found for '{query}'. Here are some similar options:"
    },
    "suggestions": {
        "ru": [
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–º–∞–π–∫–∞' –≤–º–µ—Å—Ç–æ '–º–∞–π–∫–∏')",
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–ª–µ–µ –æ–±—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–æ–¥–µ–∂–¥–∞' –≤–º–µ—Å—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞)",
            "–î–æ–±–∞–≤—å—Ç–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '—Ö–ª–æ–ø–∫–æ–≤–∞—è –º–∞–π–∫–∞', '—Å–ø–æ—Ä—Ç–∏–≤–Ω–∞—è –º–∞–π–∫–∞')"
        ],
        "uz": [
            "üá∑üá∫ Ruscha yozing - ma'lumotlar bazasida o'zbekcha mahsulotlar yo'q (masalan, '–ø–æ–ª–∏–ø—Ä–æ–ø–∏–ª–µ–Ω–æ–≤—ã–µ –º–µ—à–∫–∏' o'rniga 'polipropilen qop')",
            "Birlik sonidan foydalaning (masalan, 'mayka' o'rniga 'maykalar')",
            "Umumiyroq tavsifdan foydalaning (masalan, 'kiyim' o'rniga aniq turi)",
            "Xususiyatlarni qo'shing (masalan, 'paxtali mayka', 'sport maykasi')"
        ],
        "en": [
            "Try using singular form (e.g., 't-shirt' instead of 't-shirts')",
            "Use more general description (e.g., 'clothing' instead of specific type)",
            "Add characteristics (e.g., 'cotton t-shirt', 'sports t-shirt')"
        ]
    }
}

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
router = Router()

async def send_info_audio(message: Message, lang: str = "ru"):
    """Send the info.mp3 audio file to the user"""
    try:
        # Try multiple possible paths to find the audio file
        possible_paths = [
            Path(__file__).parent.parent / "welcome" / "Info.mp3",  # bot/welcome/Info.mp3 (from handlers/)
            Path("welcome/Info.mp3"),  # welcome/Info.mp3 (if running from bot/)
            Path("bot/welcome/Info.mp3"),  # bot/welcome/Info.mp3 (if running from project root)
            Path.cwd() / "bot" / "welcome" / "Info.mp3",  # absolute path from current working directory
        ]
        
        audio_path = None
        for path in possible_paths:
            if path.exists():
                audio_path = path
                break
        
        if audio_path:
            logging.info(f"Found audio file at: {audio_path}")
            audio_file = FSInputFile(str(audio_path))
            
            # Audio titles based on language
            if lang == "ru":
                title = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ"
                performer = "Nihol Bot"
            elif lang == "uz":
                title = "Bot haqida ma'lumot"
                performer = "Nihol Bot"
            else:  # English
                title = "Bot Information"
                performer = "Nihol Bot"
            
            await message.answer_audio(
                audio=audio_file,
                title=title,
                performer=performer
            )
        else:
            logging.warning(f"Audio file not found in any of these locations:")
            for i, path in enumerate(possible_paths, 1):
                logging.warning(f"  {i}. {path.resolve()}")
    except TelegramForbiddenError:
        await handle_blocked_user(message.from_user.id, "send_audio")
    except Exception as e:
        logging.error(f"Error sending audio: {e}")

def t(key, lang):
    return MESSAGES.get(key, {}).get(lang, MESSAGES.get(key, {}).get("ru", ""))

async def get_user_language(user_id):
    conn = await get_connection()
    user = await conn.fetchrow("SELECT language FROM users WHERE telegram_id = $1", user_id)
    await conn.close()
    return user['language'] if user and user['language'] else "ru"

def main_keyboard(lang):
    if lang == "ru":
        search_text = "üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞"
        contacts_text = "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã"
        help_text = "üÜò –ü–æ–º–æ—â—å"
        my_data_text = "üßæ –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ"
        change_lang_text = "üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫"
        placeholder = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ..."
    elif lang == "uz":
        search_text = "üîç Mahsulot qidirish"
        contacts_text = "üìû Kontaktlar"
        help_text = "üÜò Yordam"
        my_data_text = "üßæ Ma'lumotlarim"
        change_lang_text = "üåê Tilni o'zgartirish"
        placeholder = "Amalni tanlang..."
    else:  # English
        search_text = "üîç Product Search"
        contacts_text = "üìû Contacts"
        help_text = "üÜò Help"
        my_data_text = "üßæ My Data"
        change_lang_text = "üåê Change Language"
        placeholder = "Choose an action..."
    
    return ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text=search_text),
                KeyboardButton(text=contacts_text)
            ],
            [
                KeyboardButton(text=help_text),
                KeyboardButton(text=my_data_text)
            ],
            [
                KeyboardButton(text=change_lang_text)
            ]
        ],
        resize_keyboard=True,
        input_field_placeholder=placeholder
    )

def contact_keyboard(lang):
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(
            text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç" if lang == "ru" else "üì± Kontaktni yuborish",
            request_contact=True
        )]],
        resize_keyboard=True,
        one_time_keyboard=True
    )

def lang_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–†—É—Å—Å–∫–∏–π"), KeyboardButton(text="O'zbekcha"), KeyboardButton(text="English")]],
        resize_keyboard=True
    )

class RegisterState(StatesGroup):
    waiting_for_full_name = State()
    waiting_for_contact = State()
    waiting_for_language = State()

class SearchState(StatesGroup):
    waiting_for_description = State()

@router.message(CommandStart())
async def cmd_start(message: types.Message, state: FSMContext):
    await safe_send_message(message, t("choose_language", "ru"), reply_markup=lang_keyboard())
    await state.set_state(RegisterState.waiting_for_language)

@router.message(or_f(Command("language"), F.text.in_(["üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫", "üåê Tilni o'zgartirish", "üåê Change Language"])))
async def cmd_change_language(message: types.Message, state: FSMContext):
    await state.clear()
    await safe_send_message(message, t("choose_language", "ru"), reply_markup=lang_keyboard())
    await state.set_state(RegisterState.waiting_for_language)

@router.message(or_f(Command("search"), F.text.in_(["üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞", "üîç Mahsulot qidirish", "üîç Product Search"])))
async def cmd_search(message: types.Message, state: FSMContext):
    await state.clear()
    
    user_id = message.from_user.id
    lang = await get_user_language(user_id)
    
    conn = await get_connection()
    user = await conn.fetchrow("SELECT * FROM users WHERE telegram_id = $1", user_id)
    await conn.close()
    
    if not user:
        await safe_send_message(message, t("not_registered", lang), reply_markup=main_keyboard(lang))
        return

    await state.set_state(SearchState.waiting_for_description)
    cancel_keyboard = ReplyKeyboardMarkup(
        keyboard=[[
            KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞" if lang == "ru" else ("‚ùå Bekor qilish" if lang == "uz" else "‚ùå Cancel"))
        ]],
        resize_keyboard=True
    )
    
    await safe_send_message(message, t("search_prompt", lang), reply_markup=cancel_keyboard)

@router.message(RegisterState.waiting_for_language, F.text.in_(["–†—É—Å—Å–∫–∏–π", "O'zbekcha", "English"]))
async def set_language(message: types.Message, state: FSMContext):
    if message.text == "–†—É—Å—Å–∫–∏–π":
        lang = "ru"
    elif message.text == "O'zbekcha":
        lang = "uz"
    else:
        lang = "en"
    
    await state.update_data(lang=lang)
    
    user_id = message.from_user.id
    conn = await get_connection()
    
    user = await conn.fetchrow("SELECT * FROM users WHERE telegram_id = $1", user_id)
    
    if user:
        # Existing user changing language - only send confirmation
        await conn.execute("UPDATE users SET language = $1 WHERE telegram_id = $2", lang, user_id)
        await conn.close()
        await state.clear()
        await safe_send_message(message, t("language_changed", lang), reply_markup=main_keyboard(lang))
    else:
        # New user during registration - send welcome + registration flow
        await conn.close()
        await safe_send_message(message, f"{t('welcome', lang)}\n\n{t('register_prompt', lang)}", reply_markup=ReplyKeyboardRemove())
        await safe_send_message(message, t("send_name", lang), reply_markup=ReplyKeyboardRemove())
        await state.set_state(RegisterState.waiting_for_full_name)

@router.message(RegisterState.waiting_for_full_name, F.text)
async def get_full_name(message: types.Message, state: FSMContext):
    data = await state.get_data()
    lang = data.get("lang", "ru")
    full_name = message.text.strip()
    await state.update_data(full_name=full_name)
    await safe_send_message(message, t("send_contact", lang), reply_markup=contact_keyboard(lang))
    await state.set_state(RegisterState.waiting_for_contact)

@router.message(RegisterState.waiting_for_contact, F.contact)
async def register_user(message: types.Message, state: FSMContext):
    data = await state.get_data()
    lang = data.get("lang", "ru")
    full_name = data.get("full_name")
    
    user = message.from_user
    contact = message.contact
    
    conn = await get_connection()
    try:
        await conn.execute("ALTER TABLE users ADD COLUMN IF NOT EXISTS language VARCHAR(2) DEFAULT 'ru'")
        await conn.execute("ALTER TABLE users ADD COLUMN IF NOT EXISTS blocked BOOLEAN DEFAULT FALSE")
        await conn.execute("ALTER TABLE users ADD COLUMN IF NOT EXISTS blocked_at TIMESTAMP")
    except:
        pass  
    
    await conn.execute("""
        INSERT INTO users (telegram_id, full_name, username, phone, language)
        VALUES ($1, $2, $3, $4, $5)
        ON CONFLICT (telegram_id) DO UPDATE SET 
            full_name = $2, username = $3, phone = $4, language = $5
    """, user.id, full_name, user.username, contact.phone_number, lang)
    await conn.close()
    
    await state.clear()
    await safe_send_message(message, t("registration_done", lang), reply_markup=main_keyboard(lang))
    
    # Send info audio after successful registration
    await send_info_audio(message, lang)

@router.message(SearchState.waiting_for_description, F.text)
async def handle_search(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    lang = await get_user_language(user_id)
    query = message.text.strip()
    
    state_data = await state.get_data()
    prompt_message_id = state_data.get("prompt_message_id")
    if prompt_message_id is not None and message.message_id <= prompt_message_id:
        return

    cancel_texts = ["–æ—Ç–º–µ–Ω–∞", "bekor qilish", "cancel", "‚ùå –æ—Ç–º–µ–Ω–∞", "‚ùå bekor qilish", "‚ùå cancel"]
    if query.strip().lower() in cancel_texts:
        await state.clear()
        await safe_send_message(message, t("search_cancelled", lang), reply_markup=main_keyboard(lang))
        return

    menu_buttons = [
        "üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞", "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", "üÜò –ü–æ–º–æ—â—å", "üßæ –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ", "üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫",
        "üîç Mahsulot qidirish", "üìû Kontaktlar", "üÜò Yordam", "üßæ Ma'lumotlarim", "üåê Tilni o'zgartirish",
        "üîç Product Search", "üìû Contacts", "üÜò Help", "üßæ My Data", "üåê Change Language"
    ]
    if query.startswith("/") or query in menu_buttons:
        await state.clear()
        # Let the respective handler manage the response
        return

    waiting_msg = None
    if len(query.split()) > 2:
        waiting_msg = await safe_send_message(message, t("wait_message", lang), reply_markup=ReplyKeyboardRemove())

    try:
        result = await smart_search(query, lang, limit=5)
    except Exception as e:
        logging.error(f"Error in smart_search: {str(e)}", exc_info=True)
        if waiting_msg: await waiting_msg.delete()
        await safe_send_message(message, t("search_error", lang), reply_markup=main_keyboard(lang))
        return

    if waiting_msg:
        try:
            await waiting_msg.delete()
        except Exception:
            pass

    # Log usage
    conn = await get_connection()
    await conn.execute("INSERT INTO usage_logs (user_id, query) VALUES ($1, $2)", user_id, query)
    await conn.execute("UPDATE users SET requests_today = requests_today + 1 WHERE telegram_id = $1", user_id)
    await conn.close()

    # Save detailed search result (for successful searches)
    if result["status"] != "not_found" and result["results"]:
        main_result = result["results"][0]
        similar_results = result["results"][1:4] if len(result["results"]) > 1 else []
        total_results = len(result["results"])
        
        await save_search_result(
            user_id=user_id,
            query=query,
            main_result=main_result,
            similar_results=similar_results,
            language=lang,
            total_results_found=total_results
        )

    if result["status"] == "not_found" or not result["results"]:
        # Log the not found query
        try:
            await log_not_found_query(user_id, query, lang)
        except Exception as e:
            logging.error(f"Failed to log not found query: {e}")
        
        msg = f"‚ùå {t('not_found', lang).format(query=query)}"
        suggestions_text = "Tavsiyalar" if lang == "uz" else "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"
        msg += f"\n\nüí° {suggestions_text}:\n" + "\n".join([f"‚Ä¢ {s}" for s in MESSAGES["suggestions"][lang]])
    else:
        # Build and send results with accuracy/confidence
        main_item = result["results"][0]
        code = main_item.get('code', 'N/A')
        desc = main_item.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
        accuracy = main_item.get('desc_score', 0)
        
        lang_note = ""
        if lang != "ru":
            lang_note = "\n<i>(–û–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ)</i>\n"

        msg = (
            f"üì¶ <b>–ù–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫–æ–¥ –¢–ù –í–≠–î:</b>\n"
            f"<b>–ö–æ–¥:</b> <code>{code}</code>\n"
            f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {desc}{lang_note}\n"
            f"<b>–¢–æ—á–Ω–æ—Å—Ç—å:</b> {accuracy:.2f}\n\n"
            f"‚ùóÔ∏è–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥–±–æ—Ä. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –ø–æ —Ç–∞–º–æ–∂–µ–Ω–Ω–æ–º—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é."
        )

        if len(result["results"]) > 1:
            msg += "\n\nüìå <b>–ü–æ—Ö–æ–∂–∏–µ –∫–æ–¥—ã:</b>\n"
            for item in result["results"][1:4]:
                code2 = item.get('code', 'N/A')
                desc2 = item.get('description', '')
                acc2 = item.get('desc_score', 0)
                msg += f"‚Ä¢ <code>{code2}</code>: {desc2} (–¢–æ—á–Ω–æ—Å—Ç—å: {acc2:.2f})\n"

    if len(msg) > 4000:
        msg = msg[:3900] + "\n\n... (—Ç–µ–∫—Å—Ç —Å–æ–∫—Ä–∞—â–µ–Ω)"
    
    await safe_send_message(message, msg, parse_mode="HTML", reply_markup=ReplyKeyboardRemove())
    
    # Prompt for next search
    prompt_message = await safe_send_message(message,
        t("search_prompt_continue", lang),
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∞" if lang=="ru" else "Bekor qilish")]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
    )
    if prompt_message:
        await state.update_data(prompt_message_id=prompt_message.message_id)

@router.message(or_f(Command("contacts"), F.text.in_(["üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", "üìû Kontaktlar", "üìû Contacts"])))
async def cmd_contacts(message: Message, state: FSMContext):
    await state.clear()
    user_id = message.from_user.id
    lang = await get_user_language(user_id)
    await safe_send_message(message, t("contacts", lang), reply_markup=main_keyboard(lang))

@router.message(or_f(Command("myinfo"), F.text.in_(["üßæ –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ", "üßæ Ma'lumotlarim", "üßæ My Data"])))
async def cmd_myinfo(message: Message, state: FSMContext):
    await state.clear()
    user_id = message.from_user.id
    
    conn = await get_connection()
    user = await conn.fetchrow("""
        SELECT full_name, phone, telegram_id, language, registered_at
        FROM users WHERE telegram_id = $1
    """, user_id)
    await conn.close()
    
    lang = user['language'] if user else "ru"
    
    if not user:
        await safe_send_message(message, t("myinfo_not_found", lang), reply_markup=main_keyboard(lang))
        return
    
    registered_at = user['registered_at'].strftime('%Y-%m-%d %H:%M:%S') if user['registered_at'] else "Unknown"
    
    if lang == "ru":
        info_text = f"üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Å:\n\nüìã –ò–º—è: {user['full_name']}\nüì± –¢–µ–ª–µ—Ñ–æ–Ω: {user['phone']}\nüÜî Telegram ID: {user['telegram_id']}\nüåê –Ø–∑—ã–∫: {user['language']}\nüìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {registered_at}"
    elif lang == "uz":
        info_text = f"üë§ Siz haqingizda ma'lumot:\n\nüìã Ism: {user['full_name']}\nüì± Telefon: {user['phone']}\nüÜî Telegram ID: {user['telegram_id']}\nüåê Til: {user['language']}\nüìÖ Ro'yxatdan o'tgan sana: {registered_at}"
    else:
        info_text = f"üë§ Your information:\n\nüìã Name: {user['full_name']}\nüì± Phone: {user['phone']}\nüÜî Telegram ID: {user['telegram_id']}\nüåê Language: {user['language']}\nüìÖ Registration date: {registered_at}"
    
    await safe_send_message(message, info_text, reply_markup=main_keyboard(lang))

@router.message(or_f(Command("help"), F.text.in_(["üÜò –ü–æ–º–æ—â—å", "üÜò Yordam", "üÜò Help"])))
async def cmd_help(message: Message, state: FSMContext):
    await state.clear()
    user_id = message.from_user.id
    lang = await get_user_language(user_id)
    await safe_send_message(message, t("help", lang), reply_markup=main_keyboard(lang))

@router.message(F.text)
async def fallback(message: Message, state: FSMContext):
    user_id = message.from_user.id
    lang = await get_user_language(user_id)
    current_state = await state.get_state()
    
    if current_state != SearchState.waiting_for_description:
        await safe_send_message(message, t("fallback", lang), reply_markup=main_keyboard(lang))